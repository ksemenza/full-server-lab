// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  label: (where?: LabelWhereInput) => Promise<boolean>;
  tag: (where?: TagWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  label: (where: LabelWhereUniqueInput) => LabelNullablePromise;
  labels: (args?: {
    where?: LabelWhereInput;
    orderBy?: LabelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Label>;
  labelsConnection: (args?: {
    where?: LabelWhereInput;
    orderBy?: LabelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LabelConnectionPromise;
  tag: (where: TagWhereUniqueInput) => TagNullablePromise;
  tags: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Tag>;
  tagsConnection: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TagConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createLabel: (data: LabelCreateInput) => LabelPromise;
  updateLabel: (args: {
    data: LabelUpdateInput;
    where: LabelWhereUniqueInput;
  }) => LabelPromise;
  updateManyLabels: (args: {
    data: LabelUpdateManyMutationInput;
    where?: LabelWhereInput;
  }) => BatchPayloadPromise;
  upsertLabel: (args: {
    where: LabelWhereUniqueInput;
    create: LabelCreateInput;
    update: LabelUpdateInput;
  }) => LabelPromise;
  deleteLabel: (where: LabelWhereUniqueInput) => LabelPromise;
  deleteManyLabels: (where?: LabelWhereInput) => BatchPayloadPromise;
  createTag: (data: TagCreateInput) => TagPromise;
  updateTag: (args: {
    data: TagUpdateInput;
    where: TagWhereUniqueInput;
  }) => TagPromise;
  updateManyTags: (args: {
    data: TagUpdateManyMutationInput;
    where?: TagWhereInput;
  }) => BatchPayloadPromise;
  upsertTag: (args: {
    where: TagWhereUniqueInput;
    create: TagCreateInput;
    update: TagUpdateInput;
  }) => TagPromise;
  deleteTag: (where: TagWhereUniqueInput) => TagPromise;
  deleteManyTags: (where?: TagWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  label: (
    where?: LabelSubscriptionWhereInput
  ) => LabelSubscriptionPayloadSubscription;
  tag: (
    where?: TagSubscriptionWhereInput
  ) => TagSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type LabelOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "isAdded_ASC"
  | "isAdded_DESC";

export type TagOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type LabelWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface LabelWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  tag?: Maybe<TagWhereInput>;
  isAdded?: Maybe<Boolean>;
  isAdded_not?: Maybe<Boolean>;
  AND?: Maybe<LabelWhereInput[] | LabelWhereInput>;
  OR?: Maybe<LabelWhereInput[] | LabelWhereInput>;
  NOT?: Maybe<LabelWhereInput[] | LabelWhereInput>;
}

export interface TagWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  isPublished?: Maybe<Boolean>;
  isPublished_not?: Maybe<Boolean>;
  labels_every?: Maybe<LabelWhereInput>;
  labels_some?: Maybe<LabelWhereInput>;
  labels_none?: Maybe<LabelWhereInput>;
  AND?: Maybe<TagWhereInput[] | TagWhereInput>;
  OR?: Maybe<TagWhereInput[] | TagWhereInput>;
  NOT?: Maybe<TagWhereInput[] | TagWhereInput>;
}

export type TagWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface LabelCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  tag?: Maybe<TagCreateOneWithoutLabelsInput>;
  isAdded?: Maybe<Boolean>;
}

export interface TagCreateOneWithoutLabelsInput {
  create?: Maybe<TagCreateWithoutLabelsInput>;
  connect?: Maybe<TagWhereUniqueInput>;
}

export interface TagCreateWithoutLabelsInput {
  id?: Maybe<ID_Input>;
  name: String;
  isPublished?: Maybe<Boolean>;
}

export interface LabelUpdateInput {
  name?: Maybe<String>;
  tag?: Maybe<TagUpdateOneWithoutLabelsInput>;
  isAdded?: Maybe<Boolean>;
}

export interface TagUpdateOneWithoutLabelsInput {
  create?: Maybe<TagCreateWithoutLabelsInput>;
  update?: Maybe<TagUpdateWithoutLabelsDataInput>;
  upsert?: Maybe<TagUpsertWithoutLabelsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TagWhereUniqueInput>;
}

export interface TagUpdateWithoutLabelsDataInput {
  name?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
}

export interface TagUpsertWithoutLabelsInput {
  update: TagUpdateWithoutLabelsDataInput;
  create: TagCreateWithoutLabelsInput;
}

export interface LabelUpdateManyMutationInput {
  name?: Maybe<String>;
  isAdded?: Maybe<Boolean>;
}

export interface TagCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  isPublished?: Maybe<Boolean>;
  labels?: Maybe<LabelCreateManyWithoutTagInput>;
}

export interface LabelCreateManyWithoutTagInput {
  create?: Maybe<LabelCreateWithoutTagInput[] | LabelCreateWithoutTagInput>;
  connect?: Maybe<LabelWhereUniqueInput[] | LabelWhereUniqueInput>;
}

export interface LabelCreateWithoutTagInput {
  id?: Maybe<ID_Input>;
  name: String;
  isAdded?: Maybe<Boolean>;
}

export interface TagUpdateInput {
  name?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
  labels?: Maybe<LabelUpdateManyWithoutTagInput>;
}

export interface LabelUpdateManyWithoutTagInput {
  create?: Maybe<LabelCreateWithoutTagInput[] | LabelCreateWithoutTagInput>;
  delete?: Maybe<LabelWhereUniqueInput[] | LabelWhereUniqueInput>;
  connect?: Maybe<LabelWhereUniqueInput[] | LabelWhereUniqueInput>;
  set?: Maybe<LabelWhereUniqueInput[] | LabelWhereUniqueInput>;
  disconnect?: Maybe<LabelWhereUniqueInput[] | LabelWhereUniqueInput>;
  update?: Maybe<
    | LabelUpdateWithWhereUniqueWithoutTagInput[]
    | LabelUpdateWithWhereUniqueWithoutTagInput
  >;
  upsert?: Maybe<
    | LabelUpsertWithWhereUniqueWithoutTagInput[]
    | LabelUpsertWithWhereUniqueWithoutTagInput
  >;
  deleteMany?: Maybe<LabelScalarWhereInput[] | LabelScalarWhereInput>;
  updateMany?: Maybe<
    LabelUpdateManyWithWhereNestedInput[] | LabelUpdateManyWithWhereNestedInput
  >;
}

export interface LabelUpdateWithWhereUniqueWithoutTagInput {
  where: LabelWhereUniqueInput;
  data: LabelUpdateWithoutTagDataInput;
}

export interface LabelUpdateWithoutTagDataInput {
  name?: Maybe<String>;
  isAdded?: Maybe<Boolean>;
}

export interface LabelUpsertWithWhereUniqueWithoutTagInput {
  where: LabelWhereUniqueInput;
  update: LabelUpdateWithoutTagDataInput;
  create: LabelCreateWithoutTagInput;
}

export interface LabelScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  isAdded?: Maybe<Boolean>;
  isAdded_not?: Maybe<Boolean>;
  AND?: Maybe<LabelScalarWhereInput[] | LabelScalarWhereInput>;
  OR?: Maybe<LabelScalarWhereInput[] | LabelScalarWhereInput>;
  NOT?: Maybe<LabelScalarWhereInput[] | LabelScalarWhereInput>;
}

export interface LabelUpdateManyWithWhereNestedInput {
  where: LabelScalarWhereInput;
  data: LabelUpdateManyDataInput;
}

export interface LabelUpdateManyDataInput {
  name?: Maybe<String>;
  isAdded?: Maybe<Boolean>;
}

export interface TagUpdateManyMutationInput {
  name?: Maybe<String>;
  isPublished?: Maybe<Boolean>;
}

export interface LabelSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LabelWhereInput>;
  AND?: Maybe<LabelSubscriptionWhereInput[] | LabelSubscriptionWhereInput>;
  OR?: Maybe<LabelSubscriptionWhereInput[] | LabelSubscriptionWhereInput>;
  NOT?: Maybe<LabelSubscriptionWhereInput[] | LabelSubscriptionWhereInput>;
}

export interface TagSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TagWhereInput>;
  AND?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  OR?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  NOT?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Label {
  id: ID_Output;
  name: String;
  isAdded: Boolean;
}

export interface LabelPromise extends Promise<Label>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  tag: <T = TagPromise>() => T;
  isAdded: () => Promise<Boolean>;
}

export interface LabelSubscription
  extends Promise<AsyncIterator<Label>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  tag: <T = TagSubscription>() => T;
  isAdded: () => Promise<AsyncIterator<Boolean>>;
}

export interface LabelNullablePromise
  extends Promise<Label | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  tag: <T = TagPromise>() => T;
  isAdded: () => Promise<Boolean>;
}

export interface Tag {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  isPublished: Boolean;
}

export interface TagPromise extends Promise<Tag>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  labels: <T = FragmentableArray<Label>>(args?: {
    where?: LabelWhereInput;
    orderBy?: LabelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TagSubscription
  extends Promise<AsyncIterator<Tag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  labels: <T = Promise<AsyncIterator<LabelSubscription>>>(args?: {
    where?: LabelWhereInput;
    orderBy?: LabelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TagNullablePromise extends Promise<Tag | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
  labels: <T = FragmentableArray<Label>>(args?: {
    where?: LabelWhereInput;
    orderBy?: LabelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LabelConnection {
  pageInfo: PageInfo;
  edges: LabelEdge[];
}

export interface LabelConnectionPromise
  extends Promise<LabelConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LabelEdge>>() => T;
  aggregate: <T = AggregateLabelPromise>() => T;
}

export interface LabelConnectionSubscription
  extends Promise<AsyncIterator<LabelConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LabelEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLabelSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface LabelEdge {
  node: Label;
  cursor: String;
}

export interface LabelEdgePromise extends Promise<LabelEdge>, Fragmentable {
  node: <T = LabelPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LabelEdgeSubscription
  extends Promise<AsyncIterator<LabelEdge>>,
    Fragmentable {
  node: <T = LabelSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLabel {
  count: Int;
}

export interface AggregateLabelPromise
  extends Promise<AggregateLabel>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLabelSubscription
  extends Promise<AsyncIterator<AggregateLabel>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TagConnection {
  pageInfo: PageInfo;
  edges: TagEdge[];
}

export interface TagConnectionPromise
  extends Promise<TagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TagEdge>>() => T;
  aggregate: <T = AggregateTagPromise>() => T;
}

export interface TagConnectionSubscription
  extends Promise<AsyncIterator<TagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTagSubscription>() => T;
}

export interface TagEdge {
  node: Tag;
  cursor: String;
}

export interface TagEdgePromise extends Promise<TagEdge>, Fragmentable {
  node: <T = TagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TagEdgeSubscription
  extends Promise<AsyncIterator<TagEdge>>,
    Fragmentable {
  node: <T = TagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTag {
  count: Int;
}

export interface AggregateTagPromise
  extends Promise<AggregateTag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTagSubscription
  extends Promise<AsyncIterator<AggregateTag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface LabelSubscriptionPayload {
  mutation: MutationType;
  node: Label;
  updatedFields: String[];
  previousValues: LabelPreviousValues;
}

export interface LabelSubscriptionPayloadPromise
  extends Promise<LabelSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LabelPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LabelPreviousValuesPromise>() => T;
}

export interface LabelSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LabelSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LabelSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LabelPreviousValuesSubscription>() => T;
}

export interface LabelPreviousValues {
  id: ID_Output;
  name: String;
  isAdded: Boolean;
}

export interface LabelPreviousValuesPromise
  extends Promise<LabelPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  isAdded: () => Promise<Boolean>;
}

export interface LabelPreviousValuesSubscription
  extends Promise<AsyncIterator<LabelPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  isAdded: () => Promise<AsyncIterator<Boolean>>;
}

export interface TagSubscriptionPayload {
  mutation: MutationType;
  node: Tag;
  updatedFields: String[];
  previousValues: TagPreviousValues;
}

export interface TagSubscriptionPayloadPromise
  extends Promise<TagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TagPreviousValuesPromise>() => T;
}

export interface TagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TagPreviousValuesSubscription>() => T;
}

export interface TagPreviousValues {
  id: ID_Output;
  name: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  isPublished: Boolean;
}

export interface TagPreviousValuesPromise
  extends Promise<TagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  isPublished: () => Promise<Boolean>;
}

export interface TagPreviousValuesSubscription
  extends Promise<AsyncIterator<TagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Tag",
    embedded: false
  },
  {
    name: "Label",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
